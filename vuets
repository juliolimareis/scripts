#!/bin/bash
#########################################################
# @author: <juliolimareis@gmail.com>                    #
# @description: Script para criar componente vue TS     #
# @depedency: none
#########################################################

isDir="$PWD/src"
fileName=""

function help(){
	echo -e "\033[1;33m ===== Gerarador de arquivos Vue TS ===== \033[0m"
	echo -e "\033[42;1;37m !* Você deve estar na pasta raiz do projeto\033[0m"
	echo -e "\033[1;37m Você esta em => $PWD \033[0m"
	echo "" # component
	echo -e "\033[1;37m Criar component ( c | -c | component ): \033[0m"
	echo -e "\033[1;38m vuets c [name] [diretório] \033[0m"
	echo ""
	echo -e "\033[1;37m Exemplo de uso component: \033[0m"
	echo -e "\033[1;32m $ vuets c home views \033[0m"
	echo "" # modulo
	echo -e "\033[1;37m Criar Vuex modulo ( m | -m | module ): \033[0m"
	echo -e "\033[1;38m vuets m [name] \033[0m"
	echo ""
	echo -e "\033[1;37m Exemplo de uso criar module: \033[0m"
	echo -e "\033[1;32m $ vuets m coffee \033[0m"
	echo ""
	echo -e "\033[1;37mBy <juliolimareis@gmail.com>\033[0m"
	exit
}

function gerateHMTL(){
	echo -e "<template>
	<div>
		<h1>$1 is ready!</h1>
	</div>
</template>

<script lang=\"ts\" src=\"./$1.ts\"></script>

<style lang=\"scss\" scoped>
	@import \"$1.scss\";
</style>" > "$isDir/$2/$1/$fileName.vue"
	echo -e "\033[1;37mgerado => $fileName.vue\033[0m"
}

function gerateTS(){
	echo -e "import { Component, Prop, Vue } from 'vue-property-decorator'

@Component
export default class $fileName extends Vue { }" > "$isDir/$2/$1/$1.ts"
	echo -e "\033[1;37mgerado => $1.ts\033[0m"
}

function geratescss(){
	touch "$isDir/$2/$1/$1.scss"
	echo -e "\033[1;37mgerado => $1.scss\033[0m"
}

function gerateComponent(){
	fileName="$(upperCaseFirst $1)"
	mkdir "$isDir/$2/$1" #2>&1&> /dev/null
	if [ $? != 0 ]; then
		echo -e "\033[0;31mError(directory exist): Operação cancelada. \033[0m"
		exit
	fi
	gerateHMTL $1 $2
  gerateTS $1 $2
  geratescss $1 $2
	echo -e "\033[1;32mComponente gerado => $isDir/$2/$1\033[0m"
	exit
}

function upperCaseFirst(){
	echo $1 > vuets.txt
	name=$(awk 'BEGIN{RS="[.!?]+[ \t\n]*"}; {sub(".", substr(toupper($0), 1,1), $0); printf ("%s%s", $0, RT)}' vuets.txt)
	rm vuets.txt
	echo $name
}


################### Gerador de modulos #################

function interfaceObject(){
	interface="export interface $objectName {"

	for x in "${arrayAttr[@]}"
	do
		interface="$interface\n
		 $x"
	done

	interface="$interface\n}\n"
}

function interfaceState(){
	interface="$interface\nexport interface $objectName""State {\n"

	interface="$interface
	$moduleaName: $objectName\n
		loader: boolean\n
		error: any\n"

	interface="$interface\n}"
}

function gerateInterface(){
	interface=""
	interfaceObject
	interfaceState
	echo -e $interface > "$dir/$moduleaName.ts"
	echo "GERATE => $dir/$moduleaName.ts"
}

function gerateState(){
	echo -e "export default {
	$moduleaName: {},
	loader: false,
	error: false
}
	" > "$dir/state.ts"
	echo "GERATE => $dir/state.ts"
}

function gerateGetters(){
	stateParam="state: $objectName""State"
	echo -e "import { $objectName, $objectName""State } from './$moduleaName'

export default {
	$moduleaName($stateParam): $objectName {
		return state.$moduleaName
	},
	loader($stateParam): boolean {
		return state.loader
	},
	error($stateParam): any {
		return state.error
	}
}
	" > "$dir/getters.ts"
	echo "GERATE => $dir/getters.ts"
}

function gerateMutations(){
	mutationParam="state: $objectName""State"
	echo -e "import { $objectName, $objectName""State } from './$moduleaName'

export default {
	set$objectName($mutationParam, $moduleaName: $objectName): void {
		state.$moduleaName = $moduleaName
	},
	setLoader($mutationParam, loader: boolean): void {
		state.loader = loader
	},
	setError($mutationParam, error: any): void {
		state.error = error
	},
}
	" > "$dir/mutations.ts"
	echo "GERATE => $dir/mutations.ts"
}

function gerateActions(){
	actionsParam="store: ActionContext<$objectName""State, string>"
	echo -e "import { ActionContext } from 'vuex'
import { $objectName""State } from './$moduleaName'
import { api, /*setToken, clearToken*/ } from '@/services/api'

export default {
	fetch$objectName($actionsParam): void {
		api.get('/$moduleaName').then((response) => {
			store.commit('setLoader', true)
			store.commit('set$objectName', response.data)
			store.commit('setLoader', false)
		})
	},

}
	" > "$dir/actions.ts"
	echo "GERATE => $dir/actions.ts"
}

function generateIndex(){
	echo -e "import state from './state';
import getters from './getters';
import actions from './actions';
import mutations from './mutations';

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions,
};" > "$dir/index.ts"
echo "GERATE => $dir/index.ts"
}



case "$1" in
  "c"|"-c"|"component")
		if [ "$2" != '' ]; then # verifica parâmetro 2 "nome" do componente
      if [ "$3" != '' ]; then # verifica  parâmetro 3 => "diretório(views ou componet)" onde vai ser criado
				gerateComponent $2 $3
    	fi
    fi
		help
  ;;
  "m"|"-m"|"module")
		if [ "$2" != '' ]; then # verifica parâmetro 2 "nome" do componente
			# echo "gerar"
			# exit
			moduleaName="$2"
			objectName="$(upperCaseFirst $2)"
			#diretório de criação
			getFileDir="$PWD/src/store/$2"
			dir="$PWD/src/store/modules/$2"
			#criar pasta
			mkdir $dir #2>&1&> /dev/null
			if [ $? != 0 ]; then
				echo -e "\033[0;31mError(directory exist): Operação cancelada. \033[0m"
				exit
			fi
			#transforma o texto em array
			mapfile -t arrayAttr < $getFileDir
			#gerar arquivos
			gerateInterface
			gerateState
			gerateGetters
			gerateMutations
			gerateActions
			generateIndex

			echo -e "\033[1;33m * Atenção vc ainda tem que referênciar $moduleaName em @/store/index.ts* \033[0m"
			echo -e "\033[1;32m * Modulo gerado * \033[0m"
    fi
  ;;
  ""|"-h"|"help"|"-help"|"--help")
		help
  ;;
  *)
		help
  ;;
esac

help
