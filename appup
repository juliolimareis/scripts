#!/bin/bash
################################################
# @author: <juliolimareis@gmail.com>           #
# @description: de atualização de pacote e     #
#   ligamento de container                     #
# Exemples:                                    #
#    @interative                               # 
################################################

function printHead(){  
    echo -e "\033[1;33m============ AppUp ============";
    echo -e "\033[1;33m======= Ctr+C para sair =======";
    echo -e "\033[0m  ";
}

declare -A container
declare -A deployDirectory

dockerComposePath="/opt/container/docker-compose.yml"
deployPath="/opt/container/deploy/apps"

container=(
    [1]="app01"
    [2]="app02"
    [3]="app03"
    [4]="unimedgoiania-homolog"
    [5]="unimedse-homolog"
    [6]="unimedvitoria-homolog" 
)

deployDirectory=( 
    [1]=$deployPath"/outros"
    [2]=$deployPath"/app02"    
    [3]=$deployPath"/app03" 
    [4]=$deployPath"/outros" 
    [5]=$deployPath"/unimedse-homolog"
    [6]=$deployPath"/unimedvitoria"
)
#quantidade de elementos ${#container[@]}

function refresh(){
    progress=false
    while [ $progress == false ]; do
        clear
        progress=false
        while [ $progress == false ]; do
            # link para download
            printHead
            echo -e "\033[1;36m* Atualizando container *\033[0m"
            echo ""
            echo "Link para baixar o pacote: "
            read link
            # verifica se esta vazio
            if [ -z $link ]; then
                clear
                echo -e "\033[1;31mError(not null): Link não pode estar vazio \033[0m"
            else
                progress=true
            fi
        done

        # OPÇÃO DE EXTRAÇÃO
        clear
        progress=false
        while [ $progress == false ]; do
            printHead
            echo -e "\033[1;36m* Atualizando container *\033[0m"
            echo ""
            for((i=1;i<=${#container[@]};i++)); do
                echo "$i - ${container[$i]}"
            done
            echo ""
            echo "Qual container deseja atualizar? "
            read option
            # Verificar se tem valor de entrada 
            if [ -z $option ]; then
                clear
                echo -e "\033[1;31mError(not null): Opção não pode estar vazia \033[0m"    
            else         
                clear  
                # Validar parametros de entrada tipo numero inteiro
                if [[ $option = ?(+|-)+([0-9]) ]]; then
                    if [ -z ${deployDirectory[$option]} ]; then
                        echo -e "\033[1;31mError(Option not found): Opção ($option) é inválida \033[0m"
                    else
                        #echo "Nome do arquivo: $fileName"
                        printHead
                        echo -e "\033[1;36m* Atualizando container *\033[0m"
                        echo ""
                        echo -e "Link para baixar pacote: \033[1;36m$link\033[0m"
                        echo -e "Diretório de atualização: \033[1;36m${deployDirectory[$option]}\033[0m"
                        echo ""
                        echo -e "Deseja atualizar container \033[1;36m${container[$option]}\033[0m (S/N)? "
                        read confirm
                    

                        case "$confirm" in
                            s|S|sim|Sim|"")
                                clear
                                progress=true
                            ;;
                            y|Y|yes|Yes)
                                clear
                                progress=true
                            ;;
                            *)
                                clear
                                echo -e "\033[1;31m==== Operação cancelada ====\033[0m"
                            ;;
                        esac
                    fi
                else
                    echo -e "\033[1;31m(type): Opção deve ser um numero inteiro \033[0m"
                fi
            fi
        done
    done
    
    clear
    ############### INICIANDO PROCESSO ##################
    # 1 Baixar arquivo para servidor
    echo -e "\033[1;36mBaixando pacote:\033[0m"
    wget -O "healthmap_app_up.zip" $link    
    # 2 Remover .properties e .p12
    zip -d healthmap_app_up.zip healthmap.properties *.p12 
    # 3 Descompactar arquivos 
    # Verifica se diretório existe
    ls ${deployDirectory[$option]}
    if [ $? != 0 ]; then
        clear
        rm healthmap_app_up.zip 
        echo -e "\033[1;31mError(directory not valid): Não foi possivel encontrar diretório ${deployDirectory[$option]} do container ${container[$option]}. \033[0m"
        echo -e "\033[1;33m ==== Programa finalizado ==== \033[0m"
        exit
    fi
    # Descompactar e substituir arquivos em $deployDirectory[$option]
    echo "A" | sudo unzip healthmap_app_up.zip -d ${deployDirectory[$option]}
    if [ $? != 0 ]; then
        clear
        rm healthmap_app_up.zip 
        echo -e "\033[1;31mError(package not valid): Não foi possivel descompactar o pacote. Verifique se link esta correto. \033[0m"
        echo -e "Link informado: \033[1;36m$link\033[0m"
        echo -e "\033[1;33m ==== Programa finalizado ==== \033[0m"
        exit
    fi
    clear
    # clear
    # 4 Atualizar container
    sudo docker-compose -f $dockerComposePath up -d ${container[$option]}
    # 5 Reiniciar container
    sudo docker-compose -f $dockerComposePath restart ${container[$option]}
    # 6 remover pacote
    rm healthmap_app_up.zip

    echo -e "\033[1;33m ==== Programa finalizado ==== \033[0m"
    exit
}

function startContainer(){
    clear
    progress=false
    while [ $progress == false ]; do
        printHead
        echo -e "\033[1;32m* Ligando container *\033[0m"
        echo ""

        for((i=1;i<=${#container[@]};i++)); do
            echo "$i - ${container[$i]}"
        done

        echo ""
        echo "Qual container deseja ligar? "
        read option

        # Verificar se tem valor de entrada 
        if [ -z $option ]; then
            clear
            echo -e "\033[1;31mError(not null): Opção não pode estar vazia \033[0m"    
        else
            if [[ $option = ?(+|-)+([0-9]) ]]; then
                if [ -z ${deployDirectory[$option]} ]; then
                    clear
                    echo -e "\033[1;31mError(Option not found): Opção ($option) é inválida \033[0m"
                else
                    sudo docker-compose -f $dockerComposePath up -d ${container[$option]} 
                    exit  
                fi
            else
                clear
                echo -e "\033[1;31mError(type): Opção deve ser um numero inteiro \033[0m"        
            fi 
        fi
    done        
}

####### MENU #######
clear
printHead
echo -e "\033[1;36m1 - Atualizar container \033[0m"
echo -e "\033[1;32m2 - Ligar container \033[0m"
echo -e "\033[1;37mx - Sair \033[0m"
echo ""
read menu

case "$menu" in
    1|"")
        refresh
    ;;
    2)
        startContainer
    ;;
    *)
        echo -e "\033[1;33m ==== Programa finalizado ==== \033[0m"
        exit
    ;;
esac



